from vk_api.longpoll import VkLongPoll, VkEventType
import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import connectDB


token = "95f107cd1d9d0652e224c8a1ba1da2c027eba29920b294d919df2787676963e63439ad9b2b6fc584896ff"
vk_session = vk_api.VkApi(token=token)
session_api = vk_session.get_api()
longpoll = VkLongPoll(vk_session)


def create_keyboard(response):
    keyboard = VkKeyboard(one_time=False)

    keyboard.add_button('–ü—Ä–æ–¥—É–∫—Ü–∏—è', color=VkKeyboardColor.DEFAULT)
    keyboard.add_button('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç', color=VkKeyboardColor.DEFAULT)

    keyboard.add_line()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.add_button('–ö—É—Ä—Å—ã', color=VkKeyboardColor.DEFAULT)
    keyboard.add_button('–ö–æ–Ω—Ç–∞–∫—Ç—ã', color=VkKeyboardColor.DEFAULT)

    keyboard.add_line()
    keyboard.add_button('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', color=VkKeyboardColor.DEFAULT)
    keyboard.add_button('–†–µ–∫–≤–∏–∑–∏—Ç—ã', color=VkKeyboardColor.DEFAULT)

    keyboard.add_line()
    keyboard.add_button('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', color=VkKeyboardColor.POSITIVE)
    #keyboard.add_button('–í –Ω–∞—á–∞–ª–æ', color=VkKeyboardColor.POSITIVE)

    keyboard = keyboard.get_keyboard()
    return keyboard


for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and not event.from_me:
        response = event.text.lower()
        keyboard = create_keyboard(response)
        print('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ' + str(response))
        if response == '–Ω–∞—á–∞—Ç—å' or response == '–ø—Ä–∏–≤–µ—Ç' or response == 'start' or response == '/start':
            session_api.messages.send(user_id=event.user_id, message='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¶–ú–ò–¢ "–õ–Æ–ö–°". '
                                                                     '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? \n 1. –ü—Ä–æ–¥—É–∫—Ü–∏—è –¶–ú–ò–¢\n '
                                                                     '2. –ü—Ä–∞–π—Å-–ª–∏—Å—Ç\n 3. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –¶–ú–ò–¢\n'
                                                                     ' 4. –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n 5. –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n '
                                                                     '6. –†–µ–∫–≤–∏–∑–∏—Ç—ã –¶–ú–ò–¢\n 7. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ \n '
                                                                     , keyboard=keyboard, random_id=0)

        elif response == "–ø—Ä–æ–¥—É–∫—Ü–∏—è —Ü–º–∏—Ç" or response==str('1'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""select Name, Price from Products;""")
                showinfo = ''
                for row in cursor:
                    info = 'üîπ' + row['Name'] + ' ‚Äî ' + str(row['Price']) + " —Ä—É–±."
                    showinfo = showinfo + info + '\n'
                session_api.messages.send(user_id=event.user_id, message="–ü—Ä–æ–¥—É–∫—Ü–∏—è –¶–ú–ò–¢:\n" + '\n' +showinfo, keyboard=keyboard, random_id=0)
            cursor.close()

        elif response == "–ø—Ä–∞–π—Å-–ª–∏—Å—Ç" or response==str('2'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""select service_name, service_price from services;""")
                showinfo = ''
                for row in cursor:
                    info = 'üîπ' + row['service_name'] + ' ‚Äî ' + str(row['service_price']) + " —Ä—É–±."
                    showinfo = showinfo + info + '\n'
            session_api.messages.send(user_id=event.user_id, message='–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:\n' + '\n' +showinfo, keyboard=keyboard, random_id=0)

        elif response == "–∫—É—Ä—Å—ã —Ü–º–∏—Ç" or response==str('3'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""SELECT name, price, FIO, schedule FROM staff RIGHT JOIN courses ON staff.staff_ID=courses.teacher;""")
                rows=cursor.fetchall()
                showinfo = ''
                for row in rows:
                    info = ('üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: ' + row['name'] + '\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ' + str(row['price']) + " —Ä—É–±."
                            + "\nüë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + str(row['FIO']) + '\n‚åö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: '  + str(row['schedule']))
                    showinfo = showinfo + info + '\n' + '\n'
            session_api.messages.send(user_id=event.user_id, message='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤ –¶–ú–ò–¢:\n' + '\n' +showinfo,
                                      keyboard=keyboard, random_id=0)

        elif response == "—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ü–º–∏—Ç" or response==str('4'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""SELECT hours FROM working_hours;""")
                info=cursor.fetchone()
            session_api.messages.send(user_id=event.user_id, message='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¶–ú–ò–¢:\n' + '\n' +str(info['hours']), keyboard=keyboard,
                                      random_id=0)

        elif response == "–∫–æ–Ω—Ç–∞–∫—Ç—ã" or response==str('5'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""SELECT FIO, post, email, phone  FROM staff;""")
                rows=cursor.fetchall()
                showinfo = ''
                for row in rows:
                    info = ('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + row['FIO'] + '\nüíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ' + str(row['post']) + "\nüì¨ E-mail: " + str(row['email'])
                    + '\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ' + str(row['phone']))
                    showinfo = showinfo + info + '\n' + '\n'
            session_api.messages.send(user_id=event.user_id, message='–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n' + '\n' +showinfo, keyboard=keyboard,
                                      random_id=0)

        elif response == "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Ü–º–∏—Ç" or response==str('6'):
            with connectDB.connect.cursor() as cursor:
                cursor.execute("""SELECT requisites FROM requisites;""")
                info=cursor.fetchone()
            session_api.messages.send(user_id=event.user_id, message='–†–µ–∫–≤–∏–∑–∏—Ç—ã –¶–ú–ò–¢:\n' + '\n' +str(info['requisites']), keyboard=keyboard, random_id=0)

        elif response == "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞" or response==str('7'):
            session_api.messages.send(user_id=event.user_id, message='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', keyboard=keyboard,
                                      random_id=0)
            for event in longpoll.listen():
                   if event.type == VkEventType.MESSAGE_NEW and not event.from_me:
                        order = event.text.lower()
                        with connectDB.connect.cursor() as cursor:
                            a = cursor.execute("""SELECT service_name, FIO, status, ready_date FROM services join tracking 
                            ON services.service_ID = tracking.service join staff ON staff.staff_ID = tracking.employee WHERE order_ID = %s""", order)
                            rows = cursor.fetchall()
                            if a == 0:
                                session_api.messages.send(user_id=event.user_id, message='–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç :(', keyboard=keyboard, random_id=0)
                            showinfo = ''
                            for row in rows:
                                info = ('üìù –ó–∞–∫–∞–∑: ' + str(row['service_name']) + "\nüë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: " + str(row['FIO'])
                                        + '\nüîé –°—Ç–∞—Ç—É—Å: ' + str(row['status']) + '\nüìÖ –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ' + str(row['ready_date']))
                                showinfo = showinfo + info + '\n'
                                session_api.messages.send(user_id=event.user_id, message=str(showinfo), keyboard=keyboard,
                                              random_id=0)
                        if(order != ''):
                            break
        else:
            session_api.messages.send(user_id=event.user_id, message='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!', keyboard=keyboard, random_id=0)